package graphs.algoritm;

import graphs.model.Edge;
import graphs.model.Element;
import graphs.model.Group;
import graphs.model.Schema;

import java.util.HashSet;
import java.util.Set;

public class Pair {
	Schema schema;

	public Pair(Schema schema) {
		super();
		this.schema = schema;
	}

	public int calculate() {
		int result = 0;
		for (Edge e : schema.getEdges()) {
			result += this.calculate(e);
		}
		System.out.println("Full Delay: " + result);
		return result;
	}

	public int calculate(Edge e) {
		int result = 0;
		Set<Group> grs = new HashSet<Group>();
		for (Element element : e.getElements()) {
			for (Group g : schema.getGroups().values()) {
				if (g.getElements().contains(element)) {
					grs.add(g);
				}
			}
		}
		result = (grs.size() == 1) ? 0 : grs.size();
		System.out.println("Delay for edge " + e + ": " + result);
		return result;
	}

	public void run() {
		int prevResult = Integer.MAX_VALUE;
		int curRes = 0;
		boolean isChanged = true;
		int unChangedCount = 0;
		while (true) {
			if (!isChanged)
				unChangedCount++;
			if (unChangedCount < 5)
				break;

			// todo - pair replacement
			int group1 = (int) (schema.getGroups().size() * Math.random());
			int group2 = (int) (schema.getGroups().size() * Math.random());
			while (group1 == group2) {
				group2 = (int) (schema.getGroups().size() * Math.random());
			}
			curRes = this.calculate();

			if (curRes < prevResult) {
				prevResult = curRes;
				isChanged = true;
			} else {
				isChanged = false;
				// todo rollback
			}
		}

	}
}
